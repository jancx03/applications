#!/usr/bin/perl -w
# $Revision: 1.5 $
# Luis Mondesi < lemsx1@gmail.com >
#
# DESCRIPTION: syncs the music from my imac to this computer
# LICENSE: GPL

my $DEBUG = 0;
my $host = $ARGV[0];
my %hosts = ();
my $RED = "\033[1;31m";
my $NORM = "\033[0;39m";
my $GREEN = "\033[0;32m";
my $ssh_port=22;

$host = "imac" if ( not defined $host );
debug("host $host");

if ( is_alive($host) )
{
    system("rsync -e ssh -auz $host:/home/Shared/Music/ /home/Shared/Music/ > /dev/null 2>&1");
}

# @desc checks whether a given host is alive by pinging it. 
#  pinging to a given host will be cached/saved for us so that we don't 
#  have to test for a given host more than once.
# @arg 1 $host string or ip representing a given host
# @return 1 if true 0 if false
sub is_alive
{
    my $host = shift;
    return undef if ( not defined ( $host ) );
    $hosts{$host}{'alive'} = 0 if ( not exists ($hosts{$host}{'alive'}) );
    if ( $hosts{$host}{'alive'} == 0  )
    {
        my $tmp_str = undef;
        $tmp_str = qx/ping -c 1 $host/ if ( $hosts{$host}{'alive'} < 1  );
        # 0 when good
        # 256 when not good
        debug ("*** pinging $host returned $?");
        # return the opposite of ping's return output
        $hosts{$host}{'alive'} = ( $? ) ? 0:1;
        if ( $hosts{$host}{'alive'} > 0 )
        {
            # test to see if host is listening on SSH port
            use IO::Socket;
            my $socket =  IO::Socket::INET->new(
                    PeerAddr=>$host,
                    PeerPort=>$ssh_port,
                    Proto=>"tcp",
                    Type=>SOCK_STREAM);
            if ( ! $socket )
            { 
                debug("*** couldn't connect to remove host ssh port $ssh_port. $@\n");
                $hosts{$host}{'alive'}=0;
            } else {
                debug ("*** ssh to $host on port $ssh_port is possible");
                close($socket);
            }
        }
    } else {
        debug ("*** uh? We should never reach this... This means that we previously check for this host already. All checks were skipped.");
    }
    debug("is_alive returning ".$hosts{$host}{'alive'}." for $host");
    return $hosts{$host}{'alive'};
}

# @desc prints colored messages
sub debug
{
    my $msg = "@_";
    print STDERR ("$RED $msg $NORM\n")  if ( $DEBUG );
}
