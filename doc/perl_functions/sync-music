#!/usr/bin/perl -w
# $Revision: 1.9 $
# Luis Mondesi < lemsx1@gmail.com >
#
# DESCRIPTION: syncs the music from my imac to this computer
# LICENSE: GPL

use strict;
$|++;
use sigtrap qw(handler _exit_safe normal-signals error-signals);

my $LOCK_FILE = "/tmp/sync-music.lock";

print STDERR ("$0: ERROR There is a lock file already $LOCK_FILE\n") 
    and exit(1) if ( -e $LOCK_FILE );

open(LOCK,"> $LOCK_FILE") 
    or die ("Could not create lock file $LOCK_FILE. $!\n");
print LOCK (my $date = localtime(),"\n");
close(LOCK);

use Getopt::Long;
Getopt::Long::Configure('bundling');

my $DEBUG = 0;
my $host = undef; #$ARGV[0];
my %hosts = ();
my $RED = "\033[1;31m";
my $NORM = "\033[0;39m";
my $GREEN = "\033[0;32m";
my $ssh_port=22;
my $path = "/mnt/auto/imac-shared/Music/";
my $REVERSE = 0;

GetOptions(
    # flags
    'r|reverse'    => \$REVERSE,
) and $host=shift;
 
#$host = "imac" if ( not defined $host );
debug("host $host") if (defined $host);

if ( defined($host) and is_alive($host) )
{
    system("rsync -e ssh -auz $host:/home/Shared/Music/ /home/Shared/Music/ > /dev/null 2>&1");
    if ($REVERSE)
    {
        system("rsync -e ssh -auz /home/Shared/Music/ $host:/home/Shared/Music/ > /dev/null 2>&1");
    }

} elsif ( -e $path ) {
    system("rsync -auz $path /home/Shared/Music/ > /dev/null 2>&1");
    if ($REVERSE)
    {
        system("rsync -auz /home/Shared/Music/ $path/ > /dev/null 2>&1");
    }
}

_exit_safe(0);

# @desc checks whether a given host is alive by pinging it. 
#  pinging to a given host will be cached/saved for us so that we don't 
#  have to test for a given host more than once.
# @arg 1 $host string or ip representing a given host
# @return 1 if true 0 if false
sub is_alive
{
    my $host = shift;
    return undef if ( not defined ( $host ) );
    $hosts{$host}{'alive'} = 0 if ( not exists ($hosts{$host}{'alive'}) );
    my $ping_args = ( qx/ping -V/ =~ /iputils/ ) ? " -w 4 " : "" ;
    if ( $hosts{$host}{'alive'} == 0  )
    {
        my $tmp_str = undef;
        $tmp_str = qx/ping $ping_args -c 1 $host/ if ( $hosts{$host}{'alive'} < 1  );
        # 0 when good
        # 256 when not good
        debug ("*** pinging $host returned $?");
        # return the opposite of ping's return output
        $hosts{$host}{'alive'} = ( $? ) ? 0:1;
        if ( $hosts{$host}{'alive'} > 0 )
        {
            # test to see if host is listening on SSH port
            use IO::Socket;
            my $socket =  IO::Socket::INET->new(
                    PeerAddr=>$host,
                    PeerPort=>$ssh_port,
                    Proto=>"tcp",
                    Type=>SOCK_STREAM);
            if ( ! $socket )
            { 
                debug("*** couldn't connect to remove host ssh port $ssh_port. $@\n");
                $hosts{$host}{'alive'}=0;
            } else {
                debug ("*** ssh to $host on port $ssh_port is possible");
                close($socket);
            }
        }
    } else {
        debug ("*** uh? We should never reach this... This means that we previously check for this host already. All checks were skipped.");
    }
    debug("is_alive returning ".$hosts{$host}{'alive'}." for $host");
    return $hosts{$host}{'alive'};
}

# @desc prints colored messages
sub debug
{
    my $msg = "@_";
    print STDERR ("$RED $msg $NORM\n")  if ( $DEBUG );
}

sub _exit_safe
{
    my $status = shift;
    $status = 0 if (not defined($status));

    unlink($LOCK_FILE) if ( -e $LOCK_FILE );

    # TODO handle more signals
    my %exit = ( INT=>'9' );
    if ( $status =~ /^[0-9]+$/ )
    {
        exit $status;
    }
    exit $exit{$status};
}
