#!/usr/bin/perl -w
# $Revision: 1.9 $
# Luis Mondesi < lemsx1@gmail.com >
#
# DESCRIPTION: syncs the music from my imac to this computer
# LICENSE: GPL

=pod

=head1 NAME

sync-music - script to synchronize my music

=head1 DESCRIPTION 

    This script is used to run Rsync to sync my music from my iMac to the localhost.

    If HOST is given, music will be sync'd from the remote path /Users/Shared/Music/ to local path /Users/Shared/Music

=cut

use strict;
$|++;
use sigtrap qw(handler _exit_safe normal-signals error-signals);
use IO::Handle;
STDOUT->autoflush(1);    # same as: $| = 1;
STDERR->autoflush(1);

my $revision = '$Revision: 1.09 $';    # version
$revision =~ s/(\\|Revision:|\s|\$)//g;

my $LOCK_FILE = "/tmp/sync-music.lock";

use Getopt::Long;
Getopt::Long::Configure('bundling');

my $PVERSION = 0;
my $HELP     = 0;
my $USAGE    = 0;
my $DEBUG    = 0;
my $VERBOSE  = 0;

my $HOST     = undef;                          #$ARGV[0];
my %HOSTS    = ();
my $RED      = "\033[1;31m";
my $NORM     = "\033[0;39m";
my $GREEN    = "\033[0;32m";
my $ssh_port = 22;
my $PATH     = "/mnt/auto/imac-zeus/Music/";
my $REVERSE  = 0;
my $RSYNC_ARGS =
  " --compress --delete --delete-excluded --force --exclude=.[a-zA-Z0-9]* --partial-dir=.rsync-partial --partial ";
my $RSYNC_REVERSE_ARGS =
  " --compress --exclude=.[a-zA-Z0-9]* --partial-dir=.rsync-partial --partial ";

=pod

=head1 SYNOPSIS

B<sync-music>   [-v,--version]
                [-D,--debug] 
                [-h,--help]
                [-p,--path PATH]
                [-U,--usage]
                [-V,--verbose]
                [HOSTNAME_OR_IP]

=head1 OPTIONS

=over 8

=item -v,--version

Prints version and exits

=item -D,--debug

Enables debug mode

=item -h,--help

Prints this help and exits

=item -p,--path PATH

Synchronizing from local path PATH (ie no rsync over SSH from a remote host)

=item -r,--reverse

Syncs music back as well (uses rsync '--update' switch so only file that are newer will be copied

=item -U,--usage

Prints usage information and exits

=item -V,--verbose

Prints messages to the screen

=item HOSTNAME_OR_IP

Hostname or IP to sync from

=back

=cut

GetOptions(

    # flags
    'v|version' => \$PVERSION,
    'h|help'    => \$HELP,
    'D|debug'   => \$DEBUG,
    'U|usage'   => \$USAGE,
    'r|reverse' => \$REVERSE,
    'V|verbose' => \$VERBOSE,
    'p|path=s'  => \$PATH,
) and $HOST = shift;

if ($HELP)
{
    use Pod::Text;
    my $parser = Pod::Text->new(sentence => 0, width => 78);
    $parser->parse_from_file($0, \*STDOUT);
    _exit_safe(0);
}

sub _usage
{
    use Pod::Usage;
    pod2usage(1);
}

if ($USAGE)
{
    _usage();
    _exit_safe(0);    # never reaches here
}

if ($PVERSION) { print STDOUT ($revision, "\n"); _exit_safe(0); }

# main()
print STDERR ("$0: ERROR There is a lock file already $LOCK_FILE\n")
  and exit(1)
  if (-e $LOCK_FILE);

open(LOCK, "> $LOCK_FILE")
  or die("Could not create lock file $LOCK_FILE. $!\n");
print LOCK (my $date = localtime(), "\n");
close(LOCK);

debug("host $HOST") if (defined $HOST);
debug("path $PATH") if (defined $PATH);

$RSYNC_ARGS         .= " --verbose --progress " if ($VERBOSE);
$RSYNC_REVERSE_ARGS .= " --verbose --progress " if ($VERBOSE);

if (defined($HOST) and is_alive($HOST))
{
    my $cmd =
      "rsync -e ssh -au $RSYNC_ARGS $HOST:/Users/Shared/Music/ /Users/Shared/Music/";
    $cmd .= "> /dev/null 2>&1" if (not $VERBOSE and not $DEBUG);
    debug($cmd);
    system($cmd);
    if ($REVERSE)
    {
        my $cmd =
          "rsync -e ssh -au $RSYNC_REVERSE_ARGS /Users/Shared/Music/ $HOST:/Users/Shared/Music/";
        $cmd .= "> /dev/null 2>&1" if (not $VERBOSE and not $DEBUG);
        debug($cmd);
        system($cmd);
    }

}
elsif (-d $PATH)
{

    # for rsync ending / have special meaning...
    $PATH =~ s,/+$,,g;
    my $cmd = "rsync -au $RSYNC_ARGS $PATH/ /Users/Shared/Music/ ";
    $cmd .= "> /dev/null 2>&1" if (not $VERBOSE and not $DEBUG);
    debug($cmd);
    system($cmd);
    if ($REVERSE)
    {
        my $cmd = "rsync -au $RSYNC_REVERSE_ARGS /Users/Shared/Music/ $PATH/ ";
        $cmd .= "> /dev/null 2>&1" if (not $VERBOSE and not $DEBUG);
        debug($cmd);
        system($cmd);
    }
}
else
{
    no warnings;
    print STDERR ("Not local path ($PATH) or host ($HOST) given\n");
}

_exit_safe(0);

# @desc checks whether a given host is alive by pinging it.
#  pinging to a given host will be cached/saved for us so that we don't
#  have to test for a given host more than once.
# @arg 1 $HOST string or ip representing a given host
# @return 1 if true 0 if false
sub is_alive
{
    my $HOST = shift;
    return undef if (not defined($HOST));
    $HOSTS{$HOST}{'alive'} = 0 if (not exists($HOSTS{$HOST}{'alive'}));
    my $ping_args = (qx/ping -V/ =~ /iputils/) ? " -w 4 " : "";
    if ($HOSTS{$HOST}{'alive'} == 0)
    {
        my $tmp_str = undef;
        $tmp_str = qx/ping $ping_args -c 1 $HOST/
          if ($HOSTS{$HOST}{'alive'} < 1);

        # 0 when good
        # 256 when not good
        debug("*** pinging $HOST returned $?");

        # return the opposite of ping's return output
        $HOSTS{$HOST}{'alive'} = ($?) ? 0 : 1;
        if ($HOSTS{$HOST}{'alive'} > 0)
        {

            # test to see if host is listening on SSH port
            use IO::Socket;
            my $socket =
              IO::Socket::INET->new(
                                    PeerAddr => $HOST,
                                    PeerPort => $ssh_port,
                                    Proto    => "tcp",
                                    Type     => SOCK_STREAM
                                   );
            if (!$socket)
            {
                debug(
                    "*** couldn't connect to remove host ssh port $ssh_port. $@\n"
                );
                $HOSTS{$HOST}{'alive'} = 0;
            }
            else
            {
                debug("*** ssh to $HOST on port $ssh_port is possible");
                close($socket);
            }
        }
    }
    else
    {
        debug(
            "*** uh? We should never reach this... This means that we previously check for this host already. All checks were skipped."
        );
    }
    debug("is_alive returning " . $HOSTS{$HOST}{'alive'} . " for $HOST");
    return $HOSTS{$HOST}{'alive'};
}

# @desc prints colored messages
sub debug
{
    my $msg = "@_";
    print STDERR ("$RED $msg $NORM\n") if ($DEBUG);
}

sub _exit_safe
{
    my $status = shift;
    $status = 0 if (not defined($status));

    unlink($LOCK_FILE) if (-e $LOCK_FILE);

    # TODO handle more signals
    my %exit = (INT => '9');
    if ($status =~ /^[0-9]+$/)
    {
        exit $status;
    }
    exit $exit{$status};
}

=pod

=head1 AUTHORS

Luis Mondesi <lemsx1@gmail.com>

=cut

