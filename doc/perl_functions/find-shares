#!/usr/bin/perl -w
# $Revision: 0.1 $
# $Date: 2007-12-19 23:35 EST $
# Luis Mondesi <lemsx1@gmail.com>
#
# DESCRIPTION: A simple script to mount all shares from a network. It looks for NFS and Samba shares and calls "mount" using the right arguments
# USAGE:
# LICENSE: GPL

=pod

=head1 NAME

skeleton.pl - skeleton script for Perl

=head1 DESCRIPTION 

    This script ...

=cut

use strict;

my $revision = '$Revision: 1.10 $';    # version
$revision =~ s/(\\|Revision:|\s|\$)//g;

# standard Perl modules
use IO::Handle;
STDOUT->autoflush(1);                  # same as: $| = 1;
STDERR->autoflush(1);

use Getopt::Long;
Getopt::Long::Configure('bundling');
use POSIX;                    # cwd() ... man POSIX
use File::Spec::Functions;    # abs2rel() and other dir/filename specific
use File::Copy;
use File::Find;               # find();
use File::Basename;           # basename() && dirname()
use FileHandle;               # for progressbar

#eval "use My::Module";
#if ($@)
#{
#    print STDERR "\nERROR: Could not load the Image::Magick module.\n" .
#    "       To install this module use:\n".
#    "       perl -e shell -MCPAN\n".
#    "       On Debian just: apt-get install perlmagic \n\n".
#    "       FALLING BACK to 'convert'\n\n";
#    print STDERR "$@\n";
#    exit 1;
#}

# Args:
my $PVERSION = 0;
my $HELP     = 0;
my $USAGE    = 0;
my $DEBUG    = 0;

=pod

=head1 SYNOPSIS

B<skeleton.pl>  [-v,--version]
                [-D,--debug] 
                [-h,--help]
                [-U,--usage]

=head1 OPTIONS

=over 8

=item -v,--version

Prints version and exits

=item -D,--debug

Enables debug mode

=item -h,--help

Prints this help and exits

=item -U,--usage

Prints usage information and exits

=back

=cut

# get options
GetOptions(

    # flags
    'v|version' => \$PVERSION,
    'h|help'    => \$HELP,
    'D|debug'   => \$DEBUG,
    'U|usage'   => \$USAGE,

    # strings
    #'o|option=s'       =>  \$NEW_OPTION,
    # numbers
    #'a|another-option=i'      =>  \$NEW_ANOTHER_OPTION,
);

if ($HELP)
{
    use Pod::Text;
    my $parser = Pod::Text->new(sentence => 0, width => 78);
    $parser->parse_from_file($0, \*STDOUT);
    exit 0;
}

sub _usage
{
    use Pod::Usage;
    pod2usage(1);
}

if ($USAGE)
{
    _usage();
    exit 0;    # never reaches here
}

if ($PVERSION) { print STDOUT ($revision, "\n"); exit 0; }

# colors
my $RED   = "\033[1;31m";
my $NORM  = "\033[0;39m";
my $GREEN = "\033[0;32m";

# NFS and CIFS ports:
my @ports = ("2049", "445");
my @ips = ("10.1.1.10", "10.1.1.4", "10.1.1.22");
my %hosts = ();

# @desc prints colored messages
sub debug
{
    my $msg   = shift;
    my $level = shift;
    $level = 0 if not defined $level;
    print STDERR ("$RED $msg $NORM\n") if ($DEBUG);    # and $level >);
}

use Socket;
use IO::Socket;
foreach my $_host (@ips)
{
    foreach my $_port (@ports)
    {
        my $socket =
          IO::Socket::INET->new(
                                PeerAddr => $_host,
                                PeerPort => $_port,
                                Proto    => "tcp",
                                Type     => SOCK_STREAM,
                                Timeout  => 2
                               );
        if ($socket)
        {
            debug("*** $_host on port $_port is possible");
            my $iaddr = inet_aton($_host);               # or whatever address
            my $name = gethostbyaddr($iaddr, AF_INET);
            $hosts{$_host}{$_port} =
              (defined $name and $name ne 'localhost') ? $name : $_host;

            close($socket);
        }
        else
        {
            debug("*** host $_host not listening on port $_port. $@\n");
        }
    }
}

sub find_shares
{
    foreach my $_host (keys %hosts)
    {
        foreach my $_port (keys %{$hosts{$_host}})
        {
            if ($_port == 445)
            {
                my $smb =
                  qx/smbclient -N -L \/\/$_host 2> \/dev\/null |grep Disk/;
                foreach my $_line (split(/\n/, $smb))
                {
                    if ($_line =~ /^\s+([[:alnum:][:space:]]+)\s+Disk/)
                    {
                        my $_share = $1;
                        $_share =~ s/\s+$//;
                        my $_share_dir = "cifs_$_share";
                        $_share_dir =~ s,/,_,g;
                        $_share_dir =~ s,\s+,_,g;
                        print "mkdir($hosts{$_host}{$_port})\n"
                          if (not -d $hosts{$_host}{$_port});
                        print "mkdir($hosts{$_host}{$_port}/$_share_dir)\n"
                          if (not -d "$hosts{$_host}{$_port}/$_share_dir");
                        print "mount -t cifs -o guest //" . $_host . "/'$_share' $hosts{$_host}{$_port}/$_share_dir\n";
                    }
                }
            }
            elsif ($_port == 2049)
            {
                my $nfs = qx/showmount -e $_host/;
                foreach my $_line (split /\n/, $nfs)
                {
                    if ($_line =~ /^\s*(\/[\/[:alnum:]]+)/)
                    {
                        my $_share = $1;
                        $_share =~ s/\s+$//;
                        my $_share_dir = "nfs_$_share";
                        $_share_dir =~ s,/,_,g;
                        $_share_dir =~ s,\s+,_,g;
                        print "mkdir($hosts{$_host}{$_port})\n"
                          if (not -d $hosts{$_host}{$_port});
                        print "mkdir($hosts{$_host}{$_port}/$_share_dir)\n"
                          if (not -d "$hosts{$_host}{$_port}/$_share_dir");
                        print "mount -t nfs $_host:$_share $hosts{$_host}{$_port}/$_share_dir\n";
                    }
                }
            }
        }
    }
}

find_shares();

=pod

=head1 AUTHORS

Luis Mondesi <lemsx1@gmail.com>

=cut

