#!/usr/bin/env ruby
# == Synopsis
#
# mbssh: script to run commands over ssh to various remote hosts
#
# == Usage
#
# mbssh [OPTION] ... <DNS-CLUSTER> <CMD>
#
# --debug, -D:
#    show debugging information
#
# --help, -h:
#    show help
#
# --usage, -U, -?:
#    show usage
#
# --children, -c, -t <DIGIT>:
#    number of child threads to execute. defaults to 10
#
# --user, -u <USER>:
#    user to use when connecting over ssh
#
# --verbose, -v:
#    be verbose
#
# <DNS-CLUSTER>:
#    comma-separated list of dns names computers to execute on.
#    This can be st-cluster which is a common name with various A records
#    or st01,st02,etc ... with a list of single A records
#
# <CMD>:
#    command to execute on each hosts. a minimun of 10 threads will be
#    launched to execute said commands remotely

=begin
$Revision: 1.0 $
$Date: 2010-11-22 16:56 EST $
Luis Mondesi <lemsx1@gmail.com>

DESCRIPTION:
USAGE: mbssh --help
LICENSE: GPL
=end

require 'resolv'
require 'getoptlong'
require 'rdoc/usage'

opts = GetoptLong.new(
    [ '--debug', '-D', GetoptLong::NO_ARGUMENT ],
    [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
    [ '--usage', '-U', '-?', GetoptLong::NO_ARGUMENT ],
    [ '--children', '-c', '-t', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--user','--username', '-u', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ]
)

$_debug = false
$_verbose = false
num_children = 10
user = ""
opts.each do |opt, arg|
   case opt
   when '--help'
      RDoc::usage
   when '--usage'
      RDoc::usage
   when '--children'
       num_children = arg.to_i
   when '--user'
       user = arg.chomp
   when '--verbose'
       $_verbose = true
   when '--debug'
       $_debug = true
       $_verbose = true
   end
end
num_children=10 if num_children < 0
user = (not user =~ /^[[:blank:]]*$/) ? user + '@' : user

clusters = ARGV.shift
cmd  = ARGV.join(" ")

if not clusters or cmd.size < 1
    RDoc::usage
end

# helpers
def resolv_hosts(hosts)
    hosts.each do |host|
        Resolv.getaddresses(host).each do |a|
            yield a
        end
    end
end

def is_alive(remote_host)
    begin
        true if TCPSocket.new(remote_host, 22)
    rescue
        false
    end
end
# end helpers

# main()
threads = []
hosts = clusters.split(/,/)
resolv_hosts(hosts) do |ip|
    if threads.size >= num_children
        puts "waiting before: #{ip}" if $_verbose
        threads.each { |t|  t.join }
    end
    if is_alive ip
        threads << Thread.new(ip) do
            _c = "ssh -x #{user}#{ip} #{cmd}"
            if $_debug
                p _c
            else
                system(_c)
            end
        end
    else
        STDERR.puts "#{ip} skipped because is offline?"
    end
end
