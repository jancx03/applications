#!/usr/bin/perl -w
# $Revision: 1.1 $
# $Date: 2007-02-17 10:17:45 $
# Luis Mondesi < lemsx1@gmail.com >
#
# DESCRIPTION: A simple script to quickly convert from ASCII to binary and vice versa
# USAGE: bin2text "Text to binary" or bin2text "0101010001100101011110000111010000100000011101000110111100100000011000100110100101101110011000010111001001111001"
# LICENSE: GPL

=pod

=head1 NAME

bin2text - bin2text script for Perl

=head1 DESCRIPTION 

    This script is used to convert from binary to ASCII and vice versa

=cut

use strict;
$|++;

my $revision = '$Revision: 1.1 $';    # version
$revision =~ s/(\\|Revision:|\s|\$)//g;

# standard Perl modules
use Getopt::Long;
Getopt::Long::Configure('bundling');

# Args:
my $PVERSION = 0;
my $HELP     = 0;
my $USAGE    = 0;
my $DEBUG    = 0;
my $MESSAGE  = undef;

=pod

=head1 SYNOPSIS

B<bin2text>  [-v,--version]
                [-D,--debug] 
                [-h,--help]
                [-U,--usage]
                <message>

=head1 OPTIONS

=over 8

=item -v,--version

Prints version and exits

=item -D,--debug

Enables debug mode

=item -h,--help

Prints this help and exits

=item -U,--usage

Prints usage information and exits

=back

=cut

# get options
GetOptions(

    # flags
    'v|version' => \$PVERSION,
    'h|help'    => \$HELP,
    'D|debug'   => \$DEBUG,
    'U|usage'   => \$USAGE,
) and $MESSAGE=shift;

if ($HELP or !defined($MESSAGE))
{
    use Pod::Text;
    my $parser = Pod::Text->new(sentence => 0, width => 78);
    $parser->parse_from_file($0, \*STDOUT);
    exit 0;
}

sub _usage
{
    use Pod::Usage;
    pod2usage(1);
}

if ($USAGE)
{
    _usage();
    exit 0;    # never reaches here
}

if ($PVERSION) { print STDOUT ($revision, "\n"); exit 0; }
sub bin2dec
{
    my $num=shift;
    return 0 if (not defined($num));
    return oct($num);
}
my $_msg="";

if ( $MESSAGE =~ /^[[:blank:]]*[01]/ )
{
    # deal with binary
    $MESSAGE =~ s/[[:blank:]]//g;

    print "BINARY: $MESSAGE\n" if ($DEBUG);

    # TODO sanity check to make sure that e/a byte is actually 8 bits
    # and if not, make up the missing stuff as leading zeros or throw
    # some ugly error
    my $counter=0;
    my $_tmp="";
    # FIXME why not [01]{8} ?
    my @chars = split(//,$MESSAGE);
    my $num = ($#chars+1)/8;
    die ( "Message has uneven number of characters. ".
        "Must be packed in 8 bit groups. Number of blocks: $num\n") if ($num =~ /\./);
    foreach my $_bin ( @chars )
    {
        $_tmp .= $_bin;
        $counter++;
        # FIXME when number of chars it not a multiple of 8
        # this fails misserably...
        if ($counter == 8)
        {
            my $_num = bin2dec("0b".$_tmp);
            # sanity check: we only deal with ASCII
            if ( $_num > 127 or $_num < 0 )
            {
                print STDERR "Character $_tmp was skipped\n";
                next;
            }
            $_msg .= chr($_num);
            $counter = 0;
            $_tmp = "";
        }
    }
    print $_msg,"\n";
} elsif ( $MESSAGE =~ /^[[:blank:]]*[[:alnum:]\_\-\.]/ ) {
    # deal with ASCII
    print "TEXT: $MESSAGE\n" if ($DEBUG);
    
    foreach my $_ascii ( split(//,$MESSAGE) )
    {
        printf ("\%.8b",ord($_ascii));
    }
    print $_msg,"\n";
} else {
    _usage();
}

=pod

=head1 AUTHORS

Luis Mondesi <lemsx1@gmail.com>

=cut


