#!/usr/bin/env ruby
# == Synopsis
#
# bandwidth-monitor: use this to quickly monitor your input and output bandwidth on Linux
#
# == Usage
#
# bandwidth-monitor [OPTION]
#
# --create, -c:
#   create iptables rules and exit
#
# --clean, -x:
#   clean iptables rules and exit
#
# --debug, -D:
#    show colorful debugging information
#
# --help, -h:
#    show help
#
# --sleep, -s <SECONDS>:
#    number of seconds to sleep
#
# --usage, -U, -?:
#    show usage
#
# --verbose, -v
#    shows verbose messages
#

=begin
$Revision: 1.0 $
$Date: 2010-08-18 13:50 EDT $
Luis Mondesi <lmondesi@fotolog.com>

DESCRIPTION:
USAGE: bandwidth-monitor --help
LICENSE: GPL
=end

require 'getoptlong'
require 'rdoc/usage'

opts = GetoptLong.new(
[ '--debug',   '-D', GetoptLong::NO_ARGUMENT ],
[ '--help',    '-h', GetoptLong::NO_ARGUMENT ],
[ '--usage',   '-U', '-?', GetoptLong::NO_ARGUMENT ],
[ '--verbose', '-v', GetoptLong::NO_ARGUMENT ],
[ '--create', '-c', GetoptLong::NO_ARGUMENT ],
[ '--clean', '-x', GetoptLong::NO_ARGUMENT ],
[ '--sleep', '-s', GetoptLong::REQUIRED_ARGUMENT ]
)

$_verbose   = false
$_debug     = false

create_rules = false
monitor_traffic = true
clean_rules = false
sleep_sec = 1

opts.each do |opt, arg|
   case opt
   when '--help'
      RDoc::usage
   when '--usage'
      RDoc::usage
   when '--verbose'
      $_verbose=true
   when '--debug'
      $_debug=true
   when '--create'
     create_rules = true
   when '--clean'
     clean_rules = true
   when '--sleep'
      sleep_sec = arg.to_i
   end
end

# helpers
class MyError < StandardError
end
def scolor(msg,color)
   colors = {
      'red'    => "\033[1;31m",
      'norm'   => "\033[0;39m",
      'green'  => "\033[0;32m",
      'blue'   => "\033[0;34m"
   }
   ansicolor = "#{colors[color.downcase]}#{msg}#{colors['norm']}"
end
def debug(msg,val="")
   return if not $_debug
  
   $stderr.print scolor("DEBUG: ",'green')
   if val
      # val.to_s is called for us:
      $stderr.puts "#{scolor(msg,'blue')} = #{scolor(val,'red')}"
   else
      $stderr.puts "#{scolor(msg,'blue')}"
   end
end
def verbose(msg)
   return if not $_verbose
   puts "#{msg}"
end
def error(msg)
   $stderr.puts scolor("ERROR: #{msg}","red")
end
# end helpers

# main()
rules = %w{ input_bandwidth output_bandwidth }
tab = "\t"

#TODO run as root
begin
  if create_rules
    rules.each do |rule|
      `iptables -N #{rule} 2> /dev/null`
      if $? == 0
        verbose "Created #{rule} rule in iptables"
        `iptables -I #{(rule =~ /input/) ? "INPUT":"OUTPUT"} -j #{rule}`
      end
    end
  elsif clean_rules
    verbose "cleaning rules"
    rules.each do |rule|
      `iptables -D #{(rule =~ /input/) ? "INPUT":"OUTPUT"} -j #{rule} 2> /dev/null`
      `iptables -X #{rule} 2> /dev/null`
    end
    puts `iptables -nL`
  elsif monitor_traffic
    # sanity check
    input_found = false
    output_found = false
    `iptables -nL -xv`.each_line do |l|
      if l =~ /#{rules.first}/
        input_found = true
      elsif l =~ /#{rules.last}/
        output_found = true
      end
    end
    raise MyError, "Must create rules first, see --help" if not input_found or not output_found
    # end sanity check
    
    verbose "monitoring traffic for #{rules.join(' ')}"
    last_count = Hash.new
    rules.each do |rule|
      last_count[rule] = 0
    end
    out_count = 0
    while true
      out_count += 1
      if out_count == 1 or out_count % 30 == 0
        print sprintf("\n%15s#{tab}%25s", "INPUT", "OUTPUT")
        puts sprintf("\n%10s#{tab}%10s %9s#{tab}%10s\n", "Value","Bandwidth", "Value","Bandwidth")
      else
        puts "\n"
      end
      `iptables -nL -xv`.each_line do |l|
        if l =~ /(#{rules.first}|#{rules.last})[[:blank:]]+all/
          debug l
          
          _l = l.chomp.gsub(/^\s+/,"").split(/\s+/)
          p _l if $_debug

          _rule = _l[2]
          debug "rule", _rule
          raise MyError, "rule is empty" if _rule.nil? or _rule.size < 15

          _current_count = _l[1].gsub(/[^[:digit:]]+/,"").to_i
          debug "_current_count", _current_count

          persec = _current_count - last_count[_rule]
          debug "persec", persec

          last_count[_rule] = _current_count

          unit = _l[1].gsub(/[[:digit:]]+/,"")
          debug "unit", unit
          if not unit or unit.size < 1
            if persec > (1000 * 1000 * 1000)
              persec = persec / (1000 * 1000 * 1000)
              unit="Gb"
            elsif persec > (1000 * 1000)
              persec = persec / (1000 * 1000 )
              unit="Mb"
            elsif persec > 1000
              persec = persec / 1000
              unit="Kb"
            else
              unit="b"
            end
          end
          if sleep_sec == 1
            tunit = "s"
          elsif sleep_sec > 59 and sleep_sec < 3600
            tunit = "m"
          elsif sleep_sec > 3600 and sleep_sec < 86400
            tunit = "h"
          elsif sleep_sec > 86400 and sleep_sec < 31536000
            tunit = "y"
          else
            tunit = ""
          end

          print sprintf("%10d#{tab}%10s", _l[1], "#{persec} #{unit}/#{tunit}")
        end
      end 
      sleep sleep_sec
    end
  end
rescue MyError => e
   error e.message
rescue Interrupt
end

