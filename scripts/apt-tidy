#!/usr/bin/perl -w
# $Revision: 1.2 $
# $Date: 2006-02-12 05:10:11 $
# Luis Mondesi < lemsx1@gmail.com >
#
# DESCRIPTION: A simple script to cleanup your debian installation
# USAGE: $0 [--yes|--interactive][--dry-run]
# LICENSE: GPL

use strict;
$|++;

my $revision='$Revision: 1.2 $'; # version
$revision =~ s/(\\|Revision:|\s|\$)//g;

# standard Perl modules
use Getopt::Long;
Getopt::Long::Configure('bundling');
use POSIX;                  # cwd() ... man POSIX
use File::Spec::Functions;  # abs2rel() and other dir/filename specific
use File::Copy;
use File::Find;     # find();
use File::Basename; # basename() && dirname()
use FileHandle;     # for progressbar

#eval "use My::Module";
#if ($@) 
#{
#    print STDERR "\nERROR: Could not load the Image::Magick module.\n" .
#    "       To install this module use:\n".
#    "       Use: perl -e shell -MCPAN to install it.\n".
#    "       On Debian just: apt-get install perlmagic \n\n".
#    "       FALLING BACK to 'convert'\n\n";
#    print STDERR "$@\n";
#    exit 1;
#}

# Args:
my $PVERSION=0;
my $HELP=0;
my $DEBUG=0;
my $INTERACTIVE=1; # better safe than sorry...
my $DRYRUN=0;
# get options
GetOptions(
    # flags
    'v|version'         =>  \$PVERSION,
    'h|help'            =>  \$HELP,
    'D|debug'           =>  \$DEBUG,
    'i|interactive'     =>  \$INTERACTIVE,
    'd|dry-run'         =>  \$DRYRUN,
    'y|yes'             =>  sub { $INTERACTIVE=0; }
);

if ( $HELP ) { 
    use Pod::Text;
    my $parser = Pod::Text->new (sentence => 0, width => 78);
    $parser->parse_from_file($0,\*STDOUT);
    exit 0;
}

if ( $PVERSION ) { print STDOUT ($revision,"\n"); exit 0; }
sub prompt
{
    #@param 0 string := question to prompt
    #returns answer
    print STDOUT "@_";
    my $rep= <STDIN>;
    chomp($rep);
    return $rep;
}
sub print_list
{
    my $list = shift;
    my $i=0;
    foreach(@$list)
    {
        $i++; # makes list more human readable
        chomp;
        print STDOUT ("$i. $_\n");
    }
}

# orphan packages
my @orphan = qx/deborphan/;
my $rep = undef;
if ( $INTERACTIVE )
{
    while($rep ne 'q' or $rep ne 'Q')
    {
        print_list(\@orphan);
        $rep = prompt("Enter line number to exclude (q to quit):");
        if ( $rep =~ /^\d+$/ )
        {
            my $idx = $rep - 1; # convert from human readable to array index
            if ($idx > 0)
            {
                #remove from list
            }
        }
    }
}
# remaining configurations
# actions
# tips
my @extra_packages=("localepurge");
# TODO detect which packages from list are already installed
print "To save even more space install:\n";
print join(" ",@extra_packages)."\n";
# TODO prompt

__END__

=head1 NAME

apt-tidy - apt-tidy script for apt-based systems

=head1 SYNOPSIS

B<apt-tidy>  [-v,--version]
             [-D,--debug] 
             [-h,--help]
             [-d,--dry-run]
             [-y,--yes]
             [-i,--interactive]

=head1 DESCRIPTION 

    This script removes old packages, libraries, mis-configured packages and all packages that need purging (left behind configuration files) from your system. You can run it interactively (--interactive) or in batch mode (--yes). Use dry-run (--dry-run) to get a list of all actions that will be taken.

=head1 OPTIONS

=over 8

=item -v,--version

prints version and exits

=item -D,--debug

enables debug mode

=item -h,--help

prints this help and exits

=back

=head1 AUTHOR

Luis Mondesi <lemsx1@gmail.com>

=cut

