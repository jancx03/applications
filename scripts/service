#!/usr/bin/perl -w
# $Revision: 1.3 $
# $Date: 2005-11-23 17:13:24 $
# Luis Mondesi < lemsx1@gmail.com >
#
# DESCRIPTION: start/stop or removes services in Linux (all distros)
# USAGE: $0 {start|stop|restart|remove} [service1 service2 ... serviceN]
# LICENSE: GPL

use strict;
$|++;

my $revision = "1.0"; # version
my %redhat_commands = (
    'on'=>'chkconfig %s on',
    'off'=>'chkconfig %s off',
    'service'=>'/etc/init.d/%s %s',
);
my %debian_commands = (
    'on'=>'update-rc.d %s defaults',
    'off'=>'update-rc.d -f %s remove',
    'service'=>'/etc/init.d/%s %s',
);

# now assign commands accordingly
# NOTE: key 1 is output of lsb_release -i
my %distros = (
    'SUSE LINUX'=>\%redhat_commands,
    'FedoraCore'=>\%redhat_commands,
    'Debian'=>\%debian_commands,
    'Ubuntu'=>\%debian_commands,
);

#---------------------------------------------------------------------------#
# standard Perl modules
use Getopt::Long;
Getopt::Long::Configure('bundling');
# use POSIX;                  # cwd() ... man POSIX
use File::Spec::Functions;  # abs2rel() and other dir/filename specific
# use File::Copy;
# use File::Find;     # find();
# use File::Basename; # basename() && dirname()
# use FileHandle;     # for progressbar

# Args:
my $PVERSION=0;
my $HELP=0;
my $DEBUG=0;
my $ACTION=undef;
# get options
GetOptions(
    # flags
    'v|version'         =>  \$PVERSION,
    'h|help'            =>  \$HELP,
    'D|debug'           =>  \$DEBUG,
    # strings
    #'o|option=s'       =>  \$NEW_OPTION,
    # numbers
    #'a|another-option=i'      =>  \$NEW_ANOTHER_OPTION,
) and $ACTION=shift;

if ( $HELP )
{ 
    use Pod::Text;
    my $parser = Pod::Text->new (sentence => 0, width => 78);
    $parser->parse_from_file($0,\*STDOUT);
    exit 0;
}

if ( not defined($ACTION) or $ACTION !~ /start|stop|reload|status|off|on|reset|remove|add/ )
{
    use Pod::Usage;
    pod2usage(1);
    exit 0;
}

if ( $PVERSION ) { print STDOUT ($revision); exit 0; }

# what distro are we?
my $release_info = qx/lsb_release -i/;
chomp($release_info);
$release_info =~ s/.*:\s+//;
print $release_info,"\n" if ($DEBUG);

if ($DEBUG)
{
    use Data::Dumper;
    print Dumper(%distros);
}

my $KEY = $ACTION;

# deal with synonyms
# we allow as our first argument: remove, off, on, add, and all the service conventions: start, stop, restart, reload, condrestart etc..
if ($ACTION=~/start|stop|reload|status/)
{
    $KEY="service";
} elsif($ACTION=~/remove/) {
    $KEY="off";
} elsif($ACTION=~/add/) {
    $KEY="on";
}

# main
foreach(@ARGV)
{
    if ($ACTION=~/\breset\b/) # reset means to make sure the service has the proper initrc links
    {
        my $error = 0;
        system( sprintf($distros{$release_info}->{'off'},$_,$ACTION) );
        $error++ if ($?!=0);
        system( sprintf($distros{$release_info}->{'on'},$_,$ACTION) );
        $error++ if ($?!=0);
        if (!$error)
        {
            print "$_ service was reset\n";
        } else {
            print "ERROR: $_ service was not reset\n";
        }
        next; 
    } elsif ($ACTION=~/\bremove\b/ or $ACTION=~/\boff\b/) {
        # when removing a service we turn it off as well
        print "Turning off service $_\n" if ($DEBUG);
        system( sprintf($distros{$release_info}->{'service'},$_,'stop') );
    }
    my $service_cmd = sprintf($distros{$release_info}->{$KEY},$_,$ACTION);
    # TODO check if service script exists
    #print "ERROR: script doesn't exists: $service_cmd \n" if ( !-x );
    system( $service_cmd );
    if ($? != 0)
    {
        print "ERROR: $_ service was not $ACTION"."ed\n";
    }
}

__END__

=head1 NAME

service - service script for starting, stoping adding and removing services in Linux

=head1 SYNOPSIS

B<service>  [-v,--version]
                [-D,--debug] 
                [-h,--help]
                {start|stop|restart|reset|remove|off|on}
                {service1 service2 ... serviceN}

=head1 DESCRIPTION 

    This script is used for sending commands to a given service or to remove/add a service to the SysV style startup script directories. This script should work well for all Linux distributions. Tested on: RedHat/FedoraCore, SuSe, Ubuntu and Debian.
    
    Adding more distributions is as simple as:
    
    * take the distribution id from the command: lsb_release -i
    
    * add the distribution to the %distros HASH

=head1 OPTIONS

=over 8

=item -v,--version

prints version and exits

=item -D,--debug

enables debug mode

=item -h,--help

prints this help and exits

=item start,stop,restart,status

sends these arguments to the given services

=item remove,off

removes the initrc scripts from the system using chkconfig or update-rc.d depending on the distribution

=item add,on

adds the initrc scripts to the system using chkconfig or update-rc.d depending on the distribution

=back

=head1 AUTHORS

Luis Mondesi <lemsx1@gmail.com>

=cut

