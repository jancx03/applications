#!/usr/bin/perl -w
# $Revision: 1.2 $
# $Date: 2006-02-12 05:10:11 $
# Luis Mondesi < lemsx1@gmail.com >
#
# DESCRIPTION: A script to convert a hosts file (/etc/hosts, /etc/bb-hosts) to a DNS zone
# USAGE: $0 --domain example.com /path/to/hosts
# The files db.example and db.example.reverse will be created on the local directory
# LICENSE: GPL

use strict;
$|++;

my $revision='$Revision: 1.2 $'; # version
$revision =~ s/(\\|Revision:|\s|\$)//g;

# standard Perl modules
use Getopt::Long;
Getopt::Long::Configure('bundling');
use File::Spec::Functions;  # abs2rel() and other dir/filename specific
use Sys::Hostname;  # hostname()

# Args:
my $PVERSION=0;
my $HELP=0;
my $DEBUG=0;
my $FILE=undef;
my ($DOMAIN,$DNS_HEADER,$RDNS_HEADER)=undef;

# get options
GetOptions(
    # flags
    'v|version'         =>  \$PVERSION,
    'h|help'            =>  \$HELP,
    'D|debug'           =>  \$DEBUG,
    # strings
    'd|domain=s'        =>  \$DOMAIN,
    'forward-header=s'  =>  \$DNS_HEADER,
    'reverse-header=s'  =>  \$RDNS_HEADER 
) and $FILE=shift;

if ( $HELP or ! defined($FILE) or ! defined($DOMAIN) )
{ 
    use Pod::Text;
    my $parser = Pod::Text->new (sentence => 0, width => 78);
    $parser->parse_from_file($0,\*STDOUT);
    exit 0;
}

if ( $PVERSION ) { print STDOUT ($revision,"\n"); exit 0; }

my ($sec,$min,$hour,$mday,$mon,$year) = localtime; 
my $serial = ($year+=1900).sprintf("%02d",$mon).sprintf("%02d",$mday).$hour;#.$min.$sec;
my $zone = (split(/\./,$DOMAIN))[0];
my $hostname = hostname();
my %hosts=();

slurp_hosts($FILE);

warn("Overriding file db.$zone\n") if (-e "db.$zone");
warn("Overriding file db.$zone.reverse\n") if (-e "db.$zone.reverse");

# forward dns file
open(DNS,">db.$zone") or die("Could not open file /etc/bind/db.$zone");
# DNS header
if ( defined($DNS_HEADER) and -r $DNS_HEADER )
{
    # copy header
    open(FILE,"<",$DNS_HEADER ) or die("Could not open file $DNS_HEADER. $!\n");
    while(<FILE>) { 
        s/\@serial@/$serial/g;
        print DNS $_;
    }
    close(FILE);
} else {
    print DNS ("\$TTL    604800
    @    IN    SOA    $DOMAIN.   hostmaster.$DOMAIN. (
        $serial      ; serial number, in date form
        10800           ; refresh 4 minutes
        3600            ; retry interval 2 minutes
        604800          ; expire
        3600            ; default ttl
    )

    ;NS
    @                       IN      NS      $hostname.$DOMAIN.
    @                       IN      MX      10 mail
    @                       IN      A       10.10.121.45
    \$ORIGIN $DOMAIN.

    ");
}

# reverse dns file
open(RDNS,">db.$zone.reverse") or die("Could not open file /etc/bind/db.$zone");
# RDNS header
if ( defined($RDNS_HEADER) and -r $RDNS_HEADER )
{
    open(FILE,"<",$RDNS_HEADER ) or die("Could not open file $RDNS_HEADER. $!\n");
    while(<FILE>) { 
        s/\@serial@/$serial/g;
        print RDNS $_;
    }
    close(FILE);
} else {
    print RDNS ("\$TTL    604800
    @       IN      SOA     $DOMAIN. hostmaster.$DOMAIN. (
        $serial         ; Serial
        10800          ; Refresh
        3600           ; Retry
        604800         ; Expire
        3600           ; Cache TTL
    )

    ;NS
    @                       IN      NS      $hostname.$DOMAIN.
    @                       IN      MX      10 mail
    @                       IN      A       10.10.121.45
    \$ORIGIN 10.in-addr.arpa.

    ");
}

# loop through hosts
foreach my $ip ( keys %hosts )
{
    my $host = lc($hosts{$ip});
    print DNS (sprintf("%s\t\t\tIN\tA\t%s\n",$host,$ip));
    my $reverse=flip($ip);
    print RDNS (sprintf("%s\t\t\tIN\tPTR\t%s\n",$reverse,$host.".".$DOMAIN."."));
}
close(DNS);
close(RDNS);

# helper for reverse dns
sub flip
{
    my ($zone)=shift;
    my ($network,@rz,@ipc);
    (@rz)=split(/\./,$zone);
    (@ipc)=reverse(splice(@rz,0,3));
    $network=join(".",@ipc);
    return $network;
}

# @desc slurps fields of a hosts file to a global hash: %hosts
sub slurp_hosts
{
    my $file = shift;
    open(FILE,$file) || die ("Could not open $file: $!\n");
    while (<FILE>)
    {
        next if (/^\s*#/); # skip comments
        chomp($_);
        if ( $_ gt "" )
        {
            if ( $_ =~ /(\d+.\d+.\d+.\d+)\s+([[:alnum:]\-]+)/ )
            {
                $hosts{$1}=$2;
            }
        }
    }
}

__END__

=head1 NAME

hosts_to_zone - hosts_to_zone script for Perl

=head1 SYNOPSIS

B<hosts_to_zone>  [-v,--version]
                [-D,--debug] 
                [-h,--help]
                {-d,--domain test.com}
                [--forward-header /path/to/forward-header-file]
                [--reverse-header /path/to/reverse-header-file]

=head1 DESCRIPTION 

A script to convert a hosts file (/etc/hosts, /etc/bb-hosts) to a DNS zone

The files db.example and db.example.reverse will be created on the local directory

=head1 SYNOPSIS

hosts_to_zone --domain example.com /path/to/hosts

generates db.example and db.example.reverse on the local directory

hosts_to_zone --forward-header /path/to/zone --reverse-header /path/to/reverse-zone --domain example.com /path/to/hosts

generates db.example and db.example.reverse on the local directory using zone and reverse-zone files as headers for the generated zone files

=head1 OPTIONS

=over 8

=item -v,--version

prints version and exits

=item -D,--debug

enables debug mode

=item -h,--help

prints this help and exits

=item -d,--domain DOMAIN

uses DOMAIN in generated DNS files

=item --forward-header FILE

uses FILE as DNS header for our generated zone, instead of built-in header

=item --reverse-header FILE

uses FILE as reverse DNS header for our generated zone, instead of built-in header

=back

=head1 AUTHORS

Luis Mondesi <lemsx1@gmail.com>

=cut

